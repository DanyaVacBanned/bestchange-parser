import asyncio

from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from app import dp, bc

from utils.fsm import GetActualRate


@dp.message_handler(text='–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫—É—Ä—Å—É –æ–±–º–µ–Ω–∞üíµ')
async def get_actual_rate(message: types.Message):
    await GetActualRate.VALUE.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ –ø–∞—Ä—ã')
    
@dp.message_handler(state=GetActualRate.VALUE)
async def get_first_value(message: types.Message, state=FSMContext):
    
    _, values_names = bc.sort_value_names()
    values_list = [name[0].lower() for name in values_names]
    if message.text.lower() not in values_list:
        await message.answer("""
        –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–∫–æ—Ä–µ–∫–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è –≤–∞–ª—é—Ç—ã,
        –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ—á–µ–Ω—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        """)
        await state.finish()
    else:
        async with state.proxy() as sp:
            sp['value1'] = message.text
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ –ø–∞—Ä—ã')
        await GetActualRate.TO_VALUE.set()

@dp.message_handler(state=GetActualRate.TO_VALUE)
async def get_second_value(message: types.Message, state=FSMContext):
    values_dicks, values_names = bc.sort_value_names()
    values_list = [name[0].lower() for name in values_names]
    if message.text.lower() not in values_list:
        await message.answer("""
        –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–∫–æ—Ä–µ–∫–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è –≤–∞–ª—é—Ç—ã,
        –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ—á–µ–Ω—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        """)
        await state.finish()
    else:
        async with state.proxy() as sp:
            value2 = message.text
            value1 = sp['value1']
            for val in values_dicks:
                if value1 in list(val.keys()):
                    value1 = list(val.values())[0]
                    sp['value1'] = value1
                if value2 in list(val.keys()):
                    value2 = list(val.values())[0]
                    sp['value2'] = value2
        
    if 'cash' in value2.split('-'):
        await message.answer(
            """
            –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            """
            )
        await GetActualRate.CITY.set()

@dp.message_handler(state=GetActualRate.CITY)
async def get_city(message: types.Message, state=FSMContext):
    city = message.text.lower()
    async with state.proxy() as sp:
        value1 = sp['value1']
        value2 = sp['value2']
    cities_list = bc.get_countries(value1, value2)
    for name in cities_list:
        if city in list(name.keys()):
            city_href = list(name.values())[0]
            break
        else:
            city_href = None
    if city_href is not None:
        rate_list = await bc.get_rate(city_href)
        for rate in rate_list:
            await message.answer(
                f"""
                –û–±–º–µ–Ω–Ω–∏–∫: {rate['–û–±–º–µ–Ω–Ω–∏–∫']}\n
                –û—Ç–¥–∞–µ—Ç–µ: {rate['–û—Ç–¥–∞–µ—Ç–µ']}\n
                –ü–æ–ª—É—á–∞–µ—Ç–µ: {rate['–ü–æ–ª—É—á–∞–µ—Ç–µ']}\n
                """
                )
            await asyncio.sleep(0.5)
    else:
        await message.answer('–í–æ–∑–º–æ–∂–Ω—ã –≤—ã –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ')
    await state.finish()
        