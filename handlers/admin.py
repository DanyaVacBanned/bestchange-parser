import asyncio

from datetime import datetime

from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from utils.fsm import BotStart, StopPosing
from utils import shortcuts
from utils.database import TasksManager

from app import dp, bot
from app.webr import BestchangeUserAction

from utils.nav import bot_navigation

from config.auth import admin_id, developer_id, second_admin_id
from config.exhandler import logs_writer

best_change = BestchangeUserAction()
db = TasksManager('db.sqlite3')

@dp.message_handler(commands='admin')
async def admin_panel(message: types.Message):
    if message.chat.id in [admin_id, developer_id, second_admin_id]:
        await message.answer(
            """
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–Ω–µ–ª—å, –≤—ã–≤–æ–∂—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            """, reply_markup=bot_navigation.admin_keyboard()
            )
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    
@dp.message_handler(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥üñ®')
async def start_posting(message: types.Message, state=FSMContext):
    if message.chat.id in [admin_id, developer_id, second_admin_id]:
        if message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
            await message.answer(
                """
                –í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥
                """, reply_markup=bot_navigation.back_to_menu()
                )
            await BotStart.CHANNEL_ID.set()
        else:
            await state.finish()
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é", reply_markup=bot_navigation.start_keyboard())

    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

@dp.message_handler(state=BotStart.CHANNEL_ID)
async def get_channel_id(message: types.Message, state=FSMContext):
    try:
        channel_id = int(message.text.strip())
        async with state.proxy() as sp:
            sp['channel_id'] = channel_id
        await message.answer('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω')
        # await message.answer(f'–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª —Å id {channel_id}?', reply_markup=bot_navigation.confirmation_keyboard())
        await message.answer('–ü–æ—Å—Ç–∏–Ω–≥ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö?', reply_markup=bot_navigation.one_or_all_countries())

        await BotStart.COUNTRIES_SELECTION.set()
    except ValueError as ex:
        logs_writer(ex)
        await message.answer(
            """
            –ù–µ–∫–æ—Ä–µ–∫–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ ID –∫–∞–Ω–∞–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
            """
            )
        await state.finish()


@dp.message_handler(state=BotStart.COUNTRIES_SELECTION)
async def country_selection_handler(message: types.Message, state=FSMContext):
    if message.text == "–í—Å–µ —Å—Ç—Ä–∞–Ω—ãüìö":
        async with state.proxy() as sp:
            channel_id = sp['channel_id']
        await message.answer(f'–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª —Å id {channel_id}?', reply_markup=bot_navigation.confirmation_keyboard())
        await BotStart.GET_RESPONSE.set()
    elif message.text == "–û–¥–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞üìï":
        all_countries = shortcuts.get_keys_from_json('countries_and_cities')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø–µ—Ä–µ—á–Ω—è', reply_markup=bot_navigation.multiply_keyboard(all_countries))
        await BotStart.GET_COUNTRY.set()
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await state.finish()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é", reply_markup=bot_navigation.start_keyboard())


@dp.message_handler(state=BotStart.GET_COUNTRY)
async def get_country(message: types.Message, state=FSMContext):
    if message.text != '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        country = message.text
        async with state.proxy() as sp:
            sp['target_country'] = country
            channel_id = sp['channel_id']
        await message.answer(f'–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª —Å id {channel_id}?', reply_markup=bot_navigation.confirmation_keyboard())
        await BotStart.ONE_COUNTRY_GET_RESPONSE.set()
    else:
        await state.finish()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é", reply_markup=bot_navigation.start_keyboard())

@dp.message_handler(state=BotStart.ONE_COUNTRY_GET_RESPONSE)
async def one_country_get_response(message: types.Message, state=FSMContext):
    if message.text == '–î–∞':
        async with state.proxy() as sp:
            channel_id = sp['channel_id']
            target_country = sp['target_country']
        await state.finish()
        loop = asyncio.get_event_loop()
        await message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∏–Ω–≥', reply_markup=bot_navigation.start_keyboard())
        task_name = f"–ü–æ—Å—Ç–∏–Ω–≥ –≤ {target_country} –≤ –∫–∞–Ω–∞–ª {channel_id}"
        task_time = datetime.now()
        db.create_task(task_name, task_time)
        task = loop.create_task(best_change.get_rate_for_choosen_country(channel_id=channel_id, country=target_country, message=message, task_name=task_name))
        await task
    
    elif message.text == '–ù–µ—Ç':
        await message.answer(
            """
            –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é
            """, reply_markup=bot_navigation.admin_keyboard()
            )
        await state.finish()
        
@dp.message_handler(state=BotStart.GET_RESPONSE)
async def get_response(message: types.Message, state=FSMContext):
    if message.text == '–î–∞':
        async with state.proxy() as sp:
            channel_id = sp['channel_id']
        await state.finish()
        loop = asyncio.get_event_loop()
        await message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∏–Ω–≥', reply_markup=bot_navigation.start_keyboard())
        task_name = f'–ü–æ—Å—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º –≤ –∫–∞–Ω–∞–ª {channel_id}'
        task_time = datetime.now()
        db.create_task(task_name, task_time)
        task = loop.create_task(best_change.get_rate_for_post(channel_id, message, task_name=task_name))
        await task
        
    elif message.text == '–ù–µ—Ç':
        await message.answer(
            """
            –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é
            """, reply_markup=bot_navigation.admin_keyboard()
            )
        await state.finish()



@dp.message_handler(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥')
async def stop_posting(message: types.Message):
    tasks_names = db.get_tasks()
    if tasks_names == []:
        await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞')
    else:
        tasks_names_datetimes = db.get_tasks(with_datetime=True)
        await message.answer('\n'.join(tasks_names_datetimes))
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∏–Ω–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', reply_markup=bot_navigation.multiply_keyboard(tasks_names))
        await StopPosing.POSTING_NAME.set()

@dp.message_handler(state=StopPosing.POSTING_NAME)
async def get_posting_name(message: types.Message, state=FSMContext):
    if message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        try:
            task_name = message.text
            task_time = db.get_task_by_name(task_name)[1]
            db.delete_task_by_name(task_name)
            await message.answer(f'–ü–æ—Å—Ç–∏–Ω–≥ {task_name} –æ—Ç {task_time} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            await state.finish()
        except TypeError:
            await message.answer('–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º')

    else:
        await state.finish()
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é', reply_markup=bot_navigation.start_keyboard())